## Components - gui/components.py ##

<CardDisplay>:
    canvas:
        Color: 
            rgba: root.color
        Rectangle:
            texture: app.deck_texture and app.get_texture(root.card)
            size: min(root.size[0], root.size[1] * 5 / 7), min(root.size[1], root.size[0] * 7 / 5)
            pos: root.pos[0] + (root.size[0] - min(root.size[0], root.size[1] * 5 / 7)) / 2, root.pos[1]
        Rectangle:
            texture: app.deck_texture and app.get_texture("WAIT" if root.waited else None)
            size: min(root.size[0], root.size[1] * 5 / 7), min(root.size[1], root.size[0] * 7 / 5)
            pos: root.pos[0] + (root.size[0] - min(root.size[0], root.size[1] * 5 / 7)) / 2, root.pos[1]
    on_card: root.canvas.ask_update()
    on_color: root.canvas.ask_update()


<SuitDisplay>:
    canvas:
        Rectangle:
            texture: app.deck_texture and app.get_suit_texture(root.suit)
            pos: self.pos[0] + (self.size[0] - min(self.size[0], self.size[1])) / 2, self.pos[1] + (self.size[1] - min(self.size[0], self.size[1])) / 2
            size: min(self.size[0], self.size[1]), min(self.size[0], self.size[1])


<SuitScoreDisplay>:
    SuitDisplay:
        suit: root.suit
    Label:
        text: str(root.pscore)
    ProgressBar:
        max: max(root.pscore, 0) + max(root.dscore, 0)
        value: root.pscore
    Label:
        text: str(root.dscore)


<RoundCounter>:
    text: "Round %s of %s" % (root.round_number, root.max_round)


<ToolTipDisplay>:
    on_card: scroller.scroll_y = 1
    ScrollView:
        id: scroller
        do_scroll_x: False
        BoxLayout:
            orientation: "vertical"
            size_hint: 1, None
            size: root.size[0], max(root.size[1], card_display.height + name.height + description.height)
            CardDisplay:
                id: card_display
                card: root.card
                color: root.color
            Label:
                id: name
                text: root.card and "[b]%s[/b]" % root.card.name
                text_size: self.size
                markup: True
                size_hint: 1, .25
                halign: "center"
            Label:
                id: description
                text: root.card and root.card.description
                text_size: self.parent.size[0], self.text_size[1]
                font_size: dp(12)
                halign: "center"


<ConfirmPopup>:
    BoxLayout:
        orientation: "vertical"
        Label:
            text_size: self.size
            text: "[b]Are you sure you can't play something?[/b]\n\nClicking YES below will cost you [b]50[/b] points; 10 in each suit.  It will also completely clear your hand, removing any cards on the board, and draw a new 10-card hand from your personal deck.\n\nIf you need help understanding your special cards first, you can drag one to the tooltip display below your score to the right, then scroll to read its requirements."
            markup: True
            valign: "middle"
            halign: "center"
        BoxLayout:
            size_hint: 1, .25
            Button:
                text: "YES"
                on_release: root.callback(root)
            Button:
                text: "Cancel"
                on_release: root.dismiss()


## Deck Catalog - gui/screens/deck.py ##

<DeckDisplay>:
    orientation: "vertical"
    canvas:
        Color:
            rgba: root.get_backdrop(root.purchased)
        Rectangle:
            size: root.size
            pos: root.pos
    BoxLayout:
        size_hint: (1, 7)
        ToolTipDisplay:
            card: root.deck
            color: root.get_shading(root.purchased)
        Widget:
            canvas:
                Color:
                    rgba: root.get_shading(root.purchased)
                Rectangle:
                    texture: root.deck.hand_texture
                    size: min(self.size[0], self.size[1]*750/391), min(self.size[1], self.size[0]*391/750)
                    pos: self.pos[0], self.pos[1] + (self.size[1] - min(self.size[1], self.size[0]*391/750)) / 2
    BoxLayout:
        Widget:
        Button:
            text: "Play With" if root.purchased else "Purchase"
            on_release: root.clicked()
        Widget:


## Win Screens - gui/screens/game.py ##            

<AchievementEarnedDisplay>:
    orientation: "vertical"
    Widget:
        size_hint: 1, .5
    BoxLayout:
        Widget:
            canvas:
                Rectangle:
                    texture: app.get_achievement_texture(root.achievement)
                    size: min(self.size[0], self.size[1]), min(self.size[1], self.size[0])
                    pos: self.pos[0], self.pos[1]
        BoxLayout:
            orientation: "vertical"
            Label:
                text: "[b]Congratulations![/b]"
                markup: True
                text_size: self.size
                size_hint: (1, .25)
            Label:
                text: "[b]%s[/b]" % root.achievement.name
                text_size: self.size
                markup: True
                size_hint: (1, .25)
            Label:
                text: root.achievement.description
                text_size: self.size
    Widget:
        size_hint: 1, .5


<UnlockDisplay>:
    BoxLayout:
        orientation: "vertical"
        Label:
            text: "[b]Congratulations![/b]"
            markup: True
            text_size: self.size
            size_hint: (1, .25)
        Widget:
            canvas:
                Rectangle:
                    texture: app.get_achievement_texture(root.achievement)
                    size: min(self.size[0], self.size[1]), min(self.size[1], self.size[0])
                    pos: self.pos[0], self.pos[1]
        Label:
            text: "[b]%s[/b]" % root.achievement.name
            text_size: self.size
            markup: True
            size_hint: (1, .25)
        Label:
            text: root.achievement.description
            text_size: self.size
    BoxLayout:
        orientation: "vertical"
        size_hint: (2, 1)
        Label:
            text: "You have UNLOCKED:"
            size_hint: (1, .25)
        BoxLayout:
            CardDisplay:
                card: root.reward
            BoxLayout:
                orientation: "vertical"
                Label:
                    text: "[b]%s[/b]" % root.reward.name if root.reward is not None else ""
                    text_size: self.size
                    markup: True
                    size_hint: (1, .25)
                Label:
                    text: root.reward.description if root.reward is not None else ""
                    text_size: self.size


<DealerDisplay>:
    canvas:
        Rectangle:
            texture: app.get_dealer_texture(*root.get_dealer())
            size: min(self.size[0], self.size[1]), min(self.size[0], self.size[1])
            pos: self.pos[0] + (root.size[0] - self.size[0]) / 2, self.pos[1]


<WinnerScreen>:
    BoxLayout:
        orientation: "vertical"
        ActionBar:
            size_hint: (1, .075)
        BoxLayout:
            orientation: "vertical"
            Carousel:
                id: carousel
                direction: "right"
                size_hint: (1, 3)
            Label:
                text: "Play Again?"
            BoxLayout:
                size_hint: (1, .75)
                Button:
                    text: "YES"
                    on_press: root.manager.play_again()
                Button:
                    text: "no"
                    on_press: root.manager.switcher('home')


<RoundAchievementScreen>:
    BoxLayout:
        orientation: "vertical"
        ActionBar:
            size_hint: (1, .075)
        BoxLayout:
            orientation: "vertical"
            Carousel:
                id: carousel
                direction: "right"
                size_hint: (1, 4)
            BoxLayout:
                size_hint: (1, .75)
                Widget:
                Button:
                    text: "Continue"
                    on_press: root.manager.switcher('main')
                Widget:


## Tutorial Screens - gui/screens/tutorial.py ##

<WinIntroScreen@Screen>:
    Carousel:
        BoxLayout:
            orientation: "vertical"
            FinalScoreDisplay:
                score: root.game and root.game.scoreboard
            ProgressBar:
                max: 0
            BoxLayout:
                Widget:
                Button:
                    text: "CONTINUE"
                Widget:
        BoxLayout:
            orientation: "vertical"
            UnlockDisplay:
                achievement: root.achievement
                reward: root.achievement.reward
            ProgressBar:
                max: 0
            Label:
                text: "swipe left"


<TutorialDisplay@BoxLayout>:
    title: ""
    text: ""
    footer: ""
    orientation: "vertical"
    Label:
        text: "[b]" + root.title + "[/b]"
        halign: "center"
        valign: "middle"
        markup: True
        text_size: self.size
        size_hint: (1, .1)
    Label:
        text: root.text
        valign: "top"
        size_hint: (1, .7)
        text_size: self.size
    Label:
        text: "[b]" + root.footer + "[/b]"
        valign: "middle"
        markup: True
        text_size: self.size
        size_hint: (1, .08)


## Settings - gui/settings.py ##

<SliderPopup>:
    size_hint: (None, None)
    BoxLayout:
        orientation: "vertical"
        spacing: dp(5) 
        Widget:
        BoxLayout:
            Slider:
                id: slider
                min: 0.001
                max: 3.0
                value: root.value
                size_hint_y: None
                height: '42sp'
            Label:
                text: str(round(slider.value, 2))
        Widget:
        SettingSpacer:
        BoxLayout:
            size_hint_y: None
            height: dp(50)
            spacing: dp(5)
            Button:
                text: "Ok"
                on_release: root.setting._validate()
            Button:
                text: "Cancel"
                on_release: root.setting._dismiss()


## Home Screen - gui/screens/home.py ##

<HomeButton>:
    FloatLayout:
        Widget:
            canvas.before:
                Color:
                    rgba: 0, 0, 0, 1
                Rectangle:
                    size: root.size
                    pos: root.pos
                Color:
                    rgba: 1, 1, 1, 1
                Rectangle:
                    source: root.source
                    size: min(root.size[0], root.size[1]*.7), min(root.size[0], root.size[1]*.7)
                    pos: root.pos[0] + (root.size[0] - min(root.size[0], root.size[1]*.7)) / 2, root.pos[1] + .3*root.size[1]# + (root.size[1]*.7 - min(root.size[0], root.size[1]*.7)) / 2
        Label:
            text: root.text
            size: root.size[0], root.size[1] * .3
            text_size: self.size
            pos: root.pos
            halign: "center"

<HomeScreen>:
    BoxLayout:
        orientation: "vertical"
        FloatLayout:
            size_hint: 1, 5
            Button:
                canvas.after:
                    Color:
                        rgba: 0, 0, 0, 1
                    Rectangle:
                        size: self.size
                        pos: self.pos
                    Color:
                        rgba: 1, 1, 1, 1
                    Rectangle:
                        texture: app.deck_texture and app.deck_catalog[app.loaded_deck.name].hand_texture
                        size: self.size
                        pos: self.pos
                text: "PLAY"
                on_release: root.manager.switcher('main')
                pos: self.parent.pos
            Label:
                text: "PLAY NOW"
                font_size: dp(100)
                color: .1, .1, .1, 1
                pos: white_text.pos[0]-dp(5), white_text.pos[1]+dp(5)
            Label:
                id: white_text
                text: "PLAY NOW"
                font_size: dp(100)
                color: .95, .95, .95, 1
        BoxLayout:
            HomeButton:
                source: "atlas://gui/homescreen/wink"
                text: str(app.winks)
            HomeButton:
                source: "atlas://gui/homescreen/kiss"
                text: str(app.kisses)
            HomeButton:
                source: "atlas://gui/homescreen/achievements"
                text: "Achievements"
                on_release: root.manager.switcher('achieve')
            HomeButton:
                source: "atlas://gui/homescreen/statistics"
                text: "Statistics"
                on_release: root.manager.switcher('stats')
            HomeButton:
                source: "atlas://gui/homescreen/decks"
                text: "Decks"
                on_release: root.manager.switcher('decks')
            HomeButton:
                source: "atlas://gui/homescreen/cards"
                text: "Cards"
                on_release: root.manager.switcher('cards')
            HomeButton:
                source: "atlas://gui/homescreen/settings"
                text: "Settings"
                on_release: root.manager.switcher('settings')
            HomeButton:
                source: "atlas://gui/homescreen/help"
                text: "Help"


## Achievement Screen - gui/screens/achievement.py ##            

<AchievementDisplay>:
    size_hint: (1, None)
    canvas:
        Color:
            rgba: root.get_backdrop(self.earned)
        Rectangle:
            size: root.size
            pos: root.pos
            
    Widget:
        canvas:
            Color:
                rgba: root.get_shading(root.earned)
            Rectangle:
                texture: app.achievement_texture and app.deck_achievement_texture and app.get_achievement_texture(root.achievement)
                size: min(self.size[0], self.size[1]), min(self.size[1], self.size[0])
                pos: self.pos[0], self.pos[1]
        size_hint_x: 1.25
    BoxLayout:
        orientation: "vertical"
        size_hint_x: 5
        Label:
            text: "[b]%s[/b]" % root.achievement.name
            text_size: self.size
            markup: True
            size_hint: (1, .5)
        Label:
            text: root.achievement.description
            text_size: self.size
            valign: "top"
    CardDisplay:
        color: root.get_shading(root.earned)
        card: root.get_card(root.earned)
        size_hint_x: 1


## Action Bar - no source ##

<ActionBar>:
    ActionView:
        use_separator: True
        ActionPrevious:
            app_icon: app.icon_png
            title: "RendezVous"
            on_release: app.root.switcher('home')
        ActionButton:
            text: "GAME"
            on_release: app.root.switcher('main')
        ActionButton:
            text: "Cards"
            on_release: app.root.switcher('cards')
        ActionButton:
            text: "Achievements"
            on_release: app.root.switcher('achieve')
        ActionButton:
            text: "Stats"
            on_release: app.root.switcher('stats')
        ActionOverflow:
            ActionButton:
                text: "Decks"
                on_release: app.root.switcher('decks')
            ActionButton:
                text: "Settings"
                on_release: app.root.switcher('settings')
            ActionButton:
                text: "Help"


## Statistics - gui/screens/statistics.py ##

<BaseStatsDisplay>:
    orientation: "vertical"
    Label:
        text: root.title
        font_size: dp(30)
        halign: "center"
    Label:
        text: "%s wins, %s losses, %s draws" % (root.basestats.wins, root.basestats.losses, root.basestats.draws) if root.basestats is not None else " "
        halign: "center"
    Label:
        text: "current streak of %s, record streak of %s" % (root.basestats.win_streak, root.basestats.best_streak) if root.basestats is not None else " "
        halign: "center"


<StatisticsDisplay>:
    orientation: "vertical"
    BaseStatsDisplay:
        title: "Overall Statistics"
        basestats: root.statistics.base if root.statistics is not None else None
    BaseStatsDisplay:
        title: root.deck.name if root.deck else ""
        basestats: app.statistics.decks[root.deck.base_filename] if root.statistics is not None and root.deck is not None and root.deck.base_filename in root.statistics.decks else None
    BoxLayout:
        size_hint: 1, .5
        Widget:
        SuitDisplay:
            suit: str(root.best_suit(root.deck, root.statistics))
            size: dp(10), dp(10)
        Label:
            text: "Best suit: %s" % root.best_suit(root.deck, root.statistics)
        Widget:
    BoxLayout:
        size_hint: 1, .5
        Widget:
        Label:
            text: "Worst suit: %s" % root.worst_suit(root.deck, root.statistics)
        SuitDisplay:
            suit: str(root.worst_suit(root.deck, root.statistics))
            size: dp(10), dp(10)
        Widget:


## Deck Display / Edit - gui/screens/cards.py ##

<DeckEditDisplay>:
    do_scroll_y: False
    BoxLayout:
        id: layout
        size_hint_x: None
        size: root.size[1] * 5 / 7 * len(list(root.definition.cards())), root.size[1]
        

<DeckCardDisplay>:
    do_scroll_x: False
    BoxLayout:
        orientation: "vertical"
        size_hint_y: None
        size: root.size[0], root.size[1] * 2
        canvas:
            Color:
                rgba: root.get_backdrop(root.blocked)
            Rectangle:
                size: self.size
                pos: self.pos
        CardDisplay:
            card: root.card
            color: root.get_shading(root.blocked)
        Label:
            size_hint: 1, .4
            text: "[b]" + root.card.name + "[/b]"
            markup: True
            text_size: self.size
            halign: "center"
            valign: "middle"
        Label:
            size_hint: 1, .75
            text: root.card.description
            text_size: self.size
            halign: "center"
            valign: "top"
        Button:
            size_hint: 1, .25
            text: root.button_text(root.blocked)
            on_release: root.clicked()

